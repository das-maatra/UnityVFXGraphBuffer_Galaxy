#pragma kernel SpiralAnimation

float Time;
float SpeedMultiplier;
RWStructuredBuffer<float4> PointBuffer;
RWStructuredBuffer<float4> ColorBuffer;
RWStructuredBuffer<float4> MotionPropBuffer;

float random (float2 uv)
{
    return frac(sin(dot(uv,float2(12.9898,78.233)))*43758.5453123);
}

[numthreads(8, 8, 1)]
void SpiralAnimation(uint2 id : SV_DispatchThreadID)
{
    uint index = id.x + id.y * 64;

    float angle = MotionPropBuffer[index].x;
    float radius = MotionPropBuffer[index].y;
    float radiusChange = MotionPropBuffer[index].z;
    float speed = MotionPropBuffer[index].w;

    //speed *= radius;

    

    // update angle with speed
    angle += speed;
    if(angle> 360){
        angle -= 360;
    }

    // update radius with radiusChange
    radius -= radiusChange;//*0.01;
    if(radius < 0){
        radius  = 1;//MotionPropBuffer[index].y; 
    }

    // calculate pos
    float2 p = float2(cos(angle) * radius, sin(angle) * radius);


    MotionPropBuffer[index] = float4(angle, radius, radiusChange, speed); 
    PointBuffer[index] = float4(p.x, PointBuffer[index].y, p.y, radius);
}
